data a ListB<B> = NilB | ConsB of a * a ListB;;

head a xs : (a : Type<B>) -> a ListB -> a =
  match xs with
  | ConsB (x, xs') => x
  end;;

tail a xs : (a : Type<B>) -> a ListB -> a ListB =
  match xs with
  | ConsB (x, xs') => xs'
  end;;

nth n : Int<B> -> [a : Type<B>, xs : a ListB |- a] Up <A> Down <B> =
  match n with
  | 0 => alloc (susp (a, xs . head a xs))
  | _ =>
    load nth_ = nth (n - 1) in
    alloc (susp (a, xs . force nth_ @ (a, (tail a xs))))
  end;;
