data a ListP<P> = NilP | ConsP of a * a ListP;;

head a xs : (a : Type<P>) -> a ListP -> a =
  match xs with
  | ConsP (x, xs') => x
  end;;

tail a xs : (a : Type<P>) -> a ListP -> a ListP =
  match xs with
  | ConsP (x, xs') => xs'
  end;;

nth n : Int<P> -> [a : Type<P>, xs : a ListP |- a] Up <C> Down <P> =
  match n with
  | 0 => store (susp (a, xs . head a xs))
  | _ =>
    load nth_ = nth (n - 1) in
    store (susp (a, xs . force nth_ @ (a, (tail a xs))))
  end;;
