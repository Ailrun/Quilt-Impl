data a ListB<B> = NilB | ConsB of a * a ListB;;

head : (a : Type<B>) -> a ListB -> a = fun a xs ->
  match xs with
  | ConsB (x, xs) => x
  end;;

tail a xs : (a : Type<B>) -> a ListB -> a ListB =
  match xs with
  | ConsB (x, xs') => xs'
  end;;

nthHelper n : Int<A> -> [a : Type<B>, xs : a ListB |- a] Up <A> =
  match n with
  | 0 => susp (a, xs . head a xs)
  | _ => susp (a, xs . force (nthHelper (n - 1)) @ (a, (tail a xs)))
  end;;

convertNat n : Int<B> -> Int<A> Down <B> =
  match n with
  | 0 => alloc 0
  | _ =>
    load nC = convertNat (n - 1) in
    alloc (1 + nC)
  end;;

nth n : Int<B> -> [a : Type<B>, xs : a ListB |- a] Up <A> Down <B> =
  load nC = convertNat n in
  alloc (nthHelper nC);;
