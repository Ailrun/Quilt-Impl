pNat2cNat n : <p> Nat -> Down <c> => <p> Nat =
  case n of
  | 0 -> return <c> 0
  | succ n ->
    let return <c> N = pNat2cNat n in
    return <c> (succ N)
  end;;

effPowHelper n : <c> Nat -> Up <p> => <c> (Nat -> Nat) =
  case n of
  | 0 -> lift <p> (fun (x : Nat) -> 1)
  | succ n ->
    lift <p> (fun (x : Nat) -> x * (unlift <c> (effPowHelper n)) x)
  end;;

effPow n : <p> Nat -> Down <c> => <p> (Up <p> => <c> (Nat -> Nat)) =
  let return <c> N = pNat2cNat n in
  return <c> (effPowHelper N);;
