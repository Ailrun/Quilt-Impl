pow n : <p> Nat -> Down <c> => <p> (Up <p> => <c> (Nat -> Nat)) =
  case n of
  | 0 -> return <c> (lift <p> (fun (x : Nat) -> 1))
  | succ n ->
    let return <c> P = pow n in
    return <c> (lift <p> (fun (x : Nat) -> (unlift <c> P) x * x))
  end;;
