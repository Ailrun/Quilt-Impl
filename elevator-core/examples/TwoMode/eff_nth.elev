data a ListP<P> = NilP | ConsP of a * a ListP;;

head : (a : Type<P>) -> a ListP -> a = fun a xs ->
  match xs with
  | ConsP (x, xs) => x
  end;;

tail : (a : Type<P>) -> a ListP -> a ListP = fun a xs ->
  match xs with
  | ConsP (x, xs') => xs'
  end;;

nthHelper : Int<C> -> [a : Type<P>, xs : a ListP |- a] Up <C> = fun n ->
  match n with
  | 0 => susp (a, xs . head a xs)
  | _ => susp (a, xs . force (nthHelper (n - 1)) @ (a, (tail a xs)))
  end;;

convertNat : Int<P> -> Int<C> Down <P> = fun n ->
  match n with
  | 0 => store 0
  | _ =>
    load nC = convertNat (n - 1) in
    store (1 + nC)
    end
  end;;

nth : Int<P> -> [a : Type<P>, xs : a ListP |- a] Up <C> Down <P> = fun n'' ->
  load nC = convertNat n'' in
  store (nthHelper nC)
  end;;
